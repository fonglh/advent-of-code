// First digit: A
inp w
mul x 0
add x z
mod x 26        // x now stores the top value of the stack z. i.e. peek
div z 1
add x 13
eql x w         // x always 0, because A will never be 13
eql x 0         // negate x. i.e. x=1
mul y 0
add y 25        // y=25
mul y x         // y is 25
add y 1         // y is 26
mul z y         // prep for stack push
mul y 0
add y w         // add A to y
add y 5         // y = A+5
mul y x         // y=A+5
add z y         // z.push(A+5)

// Second digit: B
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 14    // y = B+14
mul y x
add z y     // z.push(B+14)

// 3rd digit: C
inp w
mul x 0
add x z
mod x 26
div z 1
add x 15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 15    // y = C+15
mul y x
add z y     // z.push(C+15)

// 4th digit: D
inp w
mul x 0
add x z
mod x 26
div z 1
add x 11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 16       // y = D+16
mul y x
add z y         // z.push(D+16)

// 5th digit: E
inp w
mul x 0
add x z
mod x 26        // x = z.peek()
div z 26        // z.pop()
add x -16       // x = z.pop() - 16
eql x w         // E == z.pop()-16 ? x=1 : x=0
eql x 0         // E == z.pop() - 16 ? x=0 : x=1
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 8         // z.push(E+8)
mul y x
add z y

// 6th digit: F
inp w
mul x 0
add x z
mod x 26
div z 26
add x -11
eql x w     // F == z.pop() - 11
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 9     // z.push(F+9)
mul y x
add z y

// 7th digit: G
inp w
mul x 0
add x z
mod x 26
div z 26
add x -6
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 2
mul y x
add z y

// 8th digit: H
inp w
mul x 0
add x z
mod x 26
div z 1
add x 11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 13    // z.push(H+13)
mul y x
add z y

// 9th digit: I
inp w
mul x 0
add x z
mod x 26
div z 1
add x 10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 16       // z.push(I+16)
mul y x
add z y

// 10th digit: J
inp w
mul x 0
add x z
mod x 26
div z 26
add x -10
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6
mul y x
add z y

// 11th digit: K
inp w
mul x 0
add x z
mod x 26
div z 26
add x -8    // if K!=z.pop()-8
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6     // z.push(K+6)
mul y x
add z y

// 12th digit: L
inp w
mul x 0
add x z
mod x 26
div z 26
add x -11
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 9
mul y x
add z y

// 13th digit: M
inp w
mul x 0
add x z
mod x 26
div z 1
add x 12
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 11       //z.push(M+11)
mul y x
add z y

// 14th digit: N
inp w
mul x 0
add x z
mod x 26
div z 26
add x -15
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 5
mul y x
add z y